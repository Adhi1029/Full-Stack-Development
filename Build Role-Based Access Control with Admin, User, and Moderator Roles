App.css
body {
  font-family: "Poppins", sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  color: #333;
}

.container {
  text-align: center;
  width: 90%;
  max-width: 500px;
}

.card {
  background: #fff;
  padding: 30px;
  border-radius: 16px;
  box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
}

.card h2 {
  margin-bottom: 15px;
  color: #222;
}

input {
  display: block;
  width: 100%;
  padding: 10px;
  margin: 8px 0;
  border: 1px solid #ccc;
  border-radius: 8px;
  font-size: 14px;
}

button {
  padding: 10px 15px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  background: #007bff;
  color: white;
  font-size: 14px;
  transition: background 0.3s ease;
  margin: 5px;
}

button:hover {
  background: #0056b3;
}

.logout {
  background: #dc3545;
}

.logout:hover {
  background: #b02a37;
}

.msg {
  margin-top: 10px;
  font-weight: 500;
  color: #444;
}

.btn-group {
  display: flex;
  justify-content: space-around;
  flex-wrap: wrap;
  margin: 10px 0;
}

.data-box {
  text-align: left;
  margin-top: 15px;
  background: #f4f4f4;
  border-radius: 8px;
  padding: 10px;
  font-size: 13px;
  max-height: 200px;
  overflow-y: auto;
}




App.jsx
import React, { useState } from "react";
import axios from "axios";
import "./App.css";

function App() {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [token, setToken] = useState(localStorage.getItem("token") || "");
  const [role, setRole] = useState(localStorage.getItem("role") || "");
  const [message, setMessage] = useState("");
  const [data, setData] = useState(null);

  const handleLogin = async (e) => {
    e.preventDefault();
    setMessage("");
    try {
      const res = await axios.post("http://localhost:3000/login", {
        username,
        password,
      });
      const decoded = parseJwt(res.data.token);
      localStorage.setItem("token", res.data.token);
      localStorage.setItem("role", decoded.role);
      setToken(res.data.token);
      setRole(decoded.role);
      setMessage(`Logged in as ${decoded.role}`);
      setUsername("");
      setPassword("");
    } catch (err) {
      setMessage("Invalid credentials");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    setToken("");
    setRole("");
    setData(null);
    setMessage("Logged out successfully.");
  };

  const fetchData = async (endpoint) => {
    try {
      const res = await axios.get(`http://localhost:3000/${endpoint}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      setData(res.data);
      setMessage("Success!");
    } catch (err) {
      setData({ message: err.response?.data?.message || "Access denied" });
    }
  };

  // Decode JWT payload
  const parseJwt = (token) => {
    try {
      return JSON.parse(atob(token.split(".")[1]));
    } catch (e) {
      return {};
    }
  };

  return (
    <div className="container">
      <h1>üîê Role-Based Access Control (RBAC)</h1>

      {!token ? (
        <form className="card" onSubmit={handleLogin}>
          <h2>Login</h2>
          <input
            type="text"
            placeholder="Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <button type="submit">Login</button>
          {message && <p className="msg">{message}</p>}
        </form>
      ) : (
        <div className="card">
          <h2>Welcome, {role}</h2>
          <p>Select a route to test access:</p>
          <div className="btn-group">
            <button onClick={() => fetchData("admin-dashboard")}>
              Admin Dashboard
            </button>
            <button onClick={() => fetchData("moderator-panel")}>
              Moderator Panel
            </button>
            <button onClick={() => fetchData("user-profile")}>
              User Profile
            </button>
          </div>
          <button className="logout" onClick={handleLogout}>
            Logout
          </button>
          {message && <p className="msg">{message}</p>}
          {data && (
            <div className="data-box">
              <h3>Response:</h3>
              <pre>{JSON.stringify(data, null, 2)}</pre>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default App;
